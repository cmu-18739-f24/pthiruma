def solve_flag():
    # These are the harcoded hex numbers that binary prints out
    transformations = [
        0x60, 0x78, 0x71, 0x7c, 0x57, 0x41, 0x50, 0x6c,
        0x7f, 0x7d, 0x78, 0x44, 0x73, 0x6f, 0x41, 0x78,
        0x48, 0x48, 0x46, 0x51, 0x45, 0x7a, 0x42, 0x42,
        0x4e, 0x4b, 0x4b, 0x56, 0x2C
    ]

    flag = [''] * 28
    for i in range(28):
        # Reverse the XOR transformation and apply the & 0x7F mask
        transformed_char = transformations[i]
        original_char = chr((transformed_char ^ (0x10 + i)) & 0x7F)
        flag[i] = original_char

    flag_str = ''.join(flag)
    
    print("Found flag:", flag_str)


solve_flag()